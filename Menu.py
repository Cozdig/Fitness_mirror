from datetime import time

import cv2 as cv
import numpy as np
import mediapipe as mp
import tkinter as tk
from tkinter import ttk
from collections import deque
import os
import sys
from PIL import Image, ImageDraw, ImageFont
from excercise import track_lateral_raises, track_squats, track_bicep_curls

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

# –ë—É—Ñ–µ—Ä—ã –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
N = 5
progress_buffers = {
    "squat": deque(maxlen=N),
    "curl_right": deque(maxlen=N),
    "curl_left": deque(maxlen=N),
    "raise_right": deque(maxlen=N),
    "raise_left": deque(maxlen=N),
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
selected_exercise = None
exit_to_menu = False
root = None

# –°–ª–æ–≤–∞—Ä—å –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
EXERCISES = {
    "1": track_bicep_curls,
    "2": track_squats,
    "3": track_lateral_raises,
}

def draw_text(frame, text, position, font_path="arial.ttf", font_size=20, color=(255, 255, 255), shadow_color=(0, 0, 0)):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ """
    pil_image = Image.fromarray(cv.cvtColor(frame, cv.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(pil_image)

    try:
        font = ImageFont.truetype(font_path, font_size)
    except IOError:
        font = ImageFont.load_default()

    # –¢–µ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    shadow_offset = 1
    draw.text((position[0] + shadow_offset, position[1] + shadow_offset), text, font=font, fill=shadow_color)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    draw.text(position, text, font=font, fill=color)

    return cv.cvtColor(np.array(pil_image), cv.COLOR_RGB2BGR)



class CameraHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π"""

    def __init__(self, width=640, height=480):
        self.cap = None
        self.width = width
        self.height = height

    def open_camera(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–º–µ—Ä—ã"""
        if self.cap is None or not self.cap.isOpened():
            self.cap = cv.VideoCapture(0, cv.CAP_DSHOW)
            self.cap.set(cv.CAP_PROP_FRAME_WIDTH, self.width)
            self.cap.set(cv.CAP_PROP_FRAME_HEIGHT, self.height)

    def close_camera(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–º–µ—Ä—ã"""
        if self.cap and self.cap.isOpened():
            self.cap.release()
        cv.destroyAllWindows()

    def read_frame(self):
        """–ß—Ç–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã"""
        if self.cap and self.cap.isOpened():
            ret, frame = self.cap.read()
            return ret, frame
        return False, None


camera = CameraHandler()


def set_exercise(choice):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    global selected_exercise, exit_to_menu, root
    if root:
        root.destroy()

    camera.close_camera()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    selected_exercise = EXERCISES.get(choice, None)
    exit_to_menu = False


def create_gui():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global root
    if root:
        try:
            if root.winfo_exists():
                return
        except tk.TclError:
            root = None  # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º root

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
    camera.close_camera()

    root = tk.Tk()
    root.title("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
    root.geometry("450x400")
    root.configure(bg="#1E1E1E")

    label = ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", font=("Arial", 16, "bold"), background="#1E1E1E",
                      foreground="white")
    label.pack(pady=20)

    buttons = [
        ("üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –±–∏—Ü–µ–ø—Å", "1"),
        ("‚≠ê –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "2"),
        ("üèã –ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏", "3"),
        ("‚ùå –í—ã—Ö–æ–¥", "exit"),
    ]

    for text, value in buttons:
        btn = tk.Button(root, text=text,
                        command=(lambda v=value: exit_application() if v == "exit" else set_exercise(v)),
                        bg="white", font=("Arial", 12), relief="flat", activebackground="#cccccc")
        btn.pack(pady=10, padx=20, fill="x")

        # –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
        btn.bind("<Enter>", lambda e, b=btn: b.config(bg="#cccccc"))
        btn.bind("<Leave>", lambda e, b=btn: b.config(bg="white"))

    root.protocol("WM_DELETE_WINDOW", exit_application)
    root.mainloop()


def exit_application():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    camera.close_camera()
    sys.exit()


while True:
    create_gui()
    if selected_exercise is None:
        break

    camera.open_camera()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

    while selected_exercise and not exit_to_menu:
        ret, frame = camera.read_frame()
        if not ret:
            break

        frame_rgb = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
        results = pose.process(frame_rgb)

        if results.pose_landmarks:
            landmarks = results.pose_landmarks.landmark
            selected_exercise(frame, landmarks)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–¥—Ä
        frame = draw_text(frame, "–ù–∞–∂–º–∏—Ç–µ M –¥–ª—è –º–µ–Ω—é", (20, frame.shape[0] - 40))

        cv.imshow("Pose", frame)

        key = cv.waitKey(1) & 0xFF
        if key == ord('m'):
            exit_to_menu = True
            selected_exercise = None
            break

camera.close_camera()
